#include "tools/codegen/core/experiments_compiler.h"

#include <fstream>
#include <map>
#include <string>

#include "test/core/test_util/test_config.h"
#include "gmock/gmock.h"
#include "gtest/gtest.h"
#include "absl/log/log.h"
#include "absl/status/status.h"

namespace grpc {
namespace testing {

class ExperimentsCompilerTest : public ::testing::Test {
 public:
  ExperimentsCompilerTest()
      : compiler_(allowed_defaults_, allowed_platforms_, final_return_,
                  final_define_, bzl_list_for_defaults_) {}
  absl::Status AddExperimentDefinition(std::string experiments_yaml_content) {
    return compiler_.AddExperimentDefinition(experiments_yaml_content);
  }
  absl::Status AddRolloutSpecification(
      std::string experiments_rollout_yaml_content) {
    return compiler_.AddRolloutSpecification(experiments_rollout_yaml_content);
  }
  absl::Status GenerateExperimentsHdr(const std::string& output_file,
                                      const std::string& mode) {
    return compiler_.GenerateExperimentsHdr(output_file, mode);
  }
  absl::Status GenerateExperimentsSrc(const std::string& output_file,
                                      const std::string& header_file_path,
                                      const std::string& mode) {
    return compiler_.GenerateExperimentsSrc(output_file, header_file_path,
                                            mode);
  }
  absl::Status ReadFile(std::string filename, std::string& output) {
    std::ifstream infile(filename);  // Open the file for reading
    if (infile.is_open()) {
      std::string line;
      // Read the file line by line (common approach)
      while (std::getline(infile, line)) {
        output += line + "\n";
      }
      infile.close();
    } else {
      return absl::InternalError("Failed to open file: " + filename);
    }
    return absl::OkStatus();
  }

 private:
  std::map<std::string, std::string> allowed_defaults_ = {
      {"broken", "false"},
      {"False", "false"},
      {"True", "true"},
      {"debug", "kDefaultForDebugOnly"}};
  std::map<std::string, std::string> allowed_platforms_ = {
      {"windows", "GPR_WINDOWS"}, {"ios", "GRPC_CFSTREAM"}, {"posix", ""}};
  std::map<std::string, std::string> final_return_ = {
      {"broken", "return false;"},
      {"False", "return false;"},
      {"True", "return true;"},
      {"debug",
       "\n#ifdef NDEBUG\nreturn false;\n#else\nreturn true;\n#endif\n"},
  };
  std::map<std::string, std::string> final_define_ = {
      {"broken", ""},
      {"False", ""},
      {"True", "#define %s"},
      {"debug", "#ifndef NDEBUG\n#define %s\n#endif"},
  };
  std::map<std::string, std::string> bzl_list_for_defaults_ = {
      {"broken", ""},
      {"False", "off"},
      {"True", "on"},
      {"debug", "dbg"},
  };
  grpc_core::ExperimentsCompiler compiler_;
};

TEST_F(ExperimentsCompilerTest, GenerateGrpcGoogle3ExperimentsOutput) {
  ASSERT_OK(AddExperimentDefinition(
      "name: test_experiment\ndescription: test experiment\nowner: "
      "ladynana\nexpiry: 2025-01-01\nuses_polling: true\nallow_in_fuzzing_"
      "config: true\ntest_tags: [\"test_tag_1\", \"test_tag_2\"]\n"));
  ASSERT_OK(
      AddRolloutSpecification("name: test_experiment\ndefault_value: True\n"));
  // Check the experiment definitions and rollout specifications are added
  // correctly.
  std::string hdr_filename = "/tmp/experiments.h";
  std::string src_filename = "/tmp/experiments.cc";
  EXPECT_OK(GenerateExperimentsHdr(hdr_filename, "grpc_google3"));
  EXPECT_OK(GenerateExperimentsSrc(src_filename, hdr_filename, "grpc_google3"));
  std::string hdr_output;
  std::string src_output;
  EXPECT_OK(ReadFile(hdr_filename, hdr_output));
  EXPECT_OK(ReadFile(src_filename, src_output));
  // Check output file is generated correctly.
  std::string expected_hdr_output =
      grpc_core::GetCopyright() +
      "// Auto generated by "
      "tools/codegen/core/gen_experiments_grpc_google3.cc\n" +
      "//" + grpc_core::GetGrpcCodegenPlaceholderText() + "\n" +
      "#ifndef GRPC_SRC_CORE_LIB_EXPERIMENTS_EXPERIMENTS_H\n#define "
      "GRPC_SRC_CORE_LIB_EXPERIMENTS_EXPERIMENTS_H\n#include "
      "<grpc/support/port_platform.h>\n#include "
      "\"src/core/lib/experiments/config.h\"\nnamespace grpc_core {\n#ifdef "
      "GRPC_EXPERIMENTS_ARE_FINAL\n#if defined(GRPC_CFSTREAM)\n#define "
      "%sGRPC_EXPERIMENT_IS_INCLUDED_TEST_EXPERIMENT\ninline bool "
      "IsTestExperimentEnabled() { return return true;; }\nelif "
      "defined(GPR_WINDOWS)\n#define "
      "%sGRPC_EXPERIMENT_IS_INCLUDED_TEST_EXPERIMENT\ninline bool "
      "IsTestExperimentEnabled() { return return true;; }\n\n#else\n#define "
      "%sGRPC_EXPERIMENT_IS_INCLUDED_TEST_EXPERIMENT\ninline bool "
      "IsTestExperimentEnabled() { return return true;; }\n#endif\n\n#else\n "
      "enum ExperimentIds {\n  kExperimentId{TestExperiment,\n  "
      "{kNumExperiments}\n};\n#define "
      "GRPC_EXPERIMENT_IS_INCLUDED_TEST_EXPERIMENT\ninline bool "
      "IsTestExperimentEnabled() { return "
      "IsExperimentEnabled<kExperimentIdTestExperiment>(); }\nextern const "
      "ExperimentMetadatag_experiment_metadata[kNumExperiments];\n#endif\n}  "
      "// namespace grpc_core\n#endif  // "
      "GRPC_SRC_CORE_LIB_EXPERIMENTS_EXPERIMENTS_H\n";
  std::string expected_src_output =
      grpc_core::GetCopyright() +
      "// Auto generated by "
      "tools/codegen/core/gen_experiments_grpc_google3.cc\n" +
      "#include <grpc/support/port_platform.h>\n\n#include "
      "\"/tmp/experiments.h\"\n#ifdef "
      "GRPC_EXPERIMENTS_ARE_FINAL\n#if defined(GRPC_CFSTREAM)\nnamespace "
      "{\nconst char* const description_test_experiment = test "
      "experiment;\nconst char* const additional_constraints_test_experiment = "
      ";\n}\n\nnamespace grpc_core {\n\nconst ExperimentMetadata "
      "g_experiment_metadata[] = {\n  {test_experiment, "
      "description_test_experiment, additional_constraints_test_experiment, "
      "required_experiments_nullptr, 0, true, true},};\n\n}  // namespace "
      "grpc_core\nelif defined(GPR_WINDOWS)\nnamespace {\nconst char* const "
      "description_test_experiment = test experiment;\nconst char* const "
      "additional_constraints_test_experiment = ;\n}\n\nnamespace grpc_core "
      "{\n\nconst ExperimentMetadata g_experiment_metadata[] = {\n  "
      "{test_experiment, description_test_experiment, "
      "additional_constraints_test_experiment, required_experiments_nullptr, "
      "0, true, true},};\n\n}  // namespace grpc_core\n\n#else\nnamespace "
      "{\nconst char* const description_test_experiment = test "
      "experiment;\nconst char* const additional_constraints_test_experiment = "
      ";\n}\n\nnamespace grpc_core {\n\nconst ExperimentMetadata "
      "g_experiment_metadata[] = {\n  {test_experiment, "
      "description_test_experiment, additional_constraints_test_experiment, "
      "required_experiments_nullptr, 0, true, true},};\n\n}  // namespace "
      "grpc_core\n#endif\n\n#endif\n";
  EXPECT_EQ(expected_hdr_output, hdr_output);
  EXPECT_EQ(expected_src_output, src_output);
  LOG(INFO) << "hdr_output: " << hdr_output;
  LOG(INFO) << "src_output: " << src_output;
}

TEST_F(ExperimentsCompilerTest, GenerateGrpcOssProductionExperimentsOutput) {
  EXPECT_OK(AddExperimentDefinition(
      "name: test_experiment\ndescription: test experiment\nowner: "
      "ladynana\nexpiry: 2025-01-01\nuses_polling: true\nallow_in_fuzzing_"
      "config: true\ntest_tags: [\"test_tag_1\", \"test_tag_2\"]\n"));
  EXPECT_OK(
      AddRolloutSpecification("name: test_experiment\ndefault_value: True\n"));
  // Check the experiment definitions and rollout specifications are added
  // correctly.
  std::string hdr_filename = "/tmp/experiments.github.h";
  std::string src_filename = "/tmp/experiments.github.cc";
  EXPECT_OK(GenerateExperimentsHdr(hdr_filename, "grpc_oss_production"));
  EXPECT_OK(GenerateExperimentsSrc(src_filename, hdr_filename,
                                   "grpc_oss_production"));
  std::string hdr_output;
  std::string src_output;
  EXPECT_OK(ReadFile(hdr_filename, hdr_output));
  EXPECT_OK(ReadFile(src_filename, src_output));
  // Check output file is generated correctly.
  std::string expected_hdr_output =
      grpc_core::GetCopyright() +
      "// Auto generated by "
      "tools/codegen/core/gen_experiments_grpc_oss.cc\n" +
      "//" + grpc_core::GetGrpcCodegenPlaceholderText() +
      "\n#ifndef GRPC_SRC_CORE_LIB_EXPERIMENTS_EXPERIMENTS_H\n#define "
      "GRPC_SRC_CORE_LIB_EXPERIMENTS_EXPERIMENTS_H\n#include "
      "<grpc/support/port_platform.h>\n#include "
      "\"src/core/lib/experiments/config.h\"\nnamespace grpc_core {\n#ifdef "
      "GRPC_EXPERIMENTS_ARE_FINAL\n#if defined(GRPC_CFSTREAM)\n#define "
      "%sGRPC_EXPERIMENT_IS_INCLUDED_TEST_EXPERIMENT\ninline bool "
      "IsTestExperimentEnabled() { return return true;; }\nelif "
      "defined(GPR_WINDOWS)\n#define "
      "%sGRPC_EXPERIMENT_IS_INCLUDED_TEST_EXPERIMENT\ninline bool "
      "IsTestExperimentEnabled() { return return true;; }\n\n#else\n#define "
      "%sGRPC_EXPERIMENT_IS_INCLUDED_TEST_EXPERIMENT\ninline bool "
      "IsTestExperimentEnabled() { return return true;; }\n#endif\n\n#else\n "
      "enum ExperimentIds {\n  kExperimentId{TestExperiment,\n  "
      "{kNumExperiments}\n};\n#define "
      "GRPC_EXPERIMENT_IS_INCLUDED_TEST_EXPERIMENT\ninline bool "
      "IsTestExperimentEnabled() { return "
      "IsExperimentEnabled<kExperimentIdTestExperiment>(); }\nextern const "
      "ExperimentMetadatag_experiment_metadata[kNumExperiments];\n#endif\n}  "
      "// namespace grpc_core\n#endif  // "
      "GRPC_SRC_CORE_LIB_EXPERIMENTS_EXPERIMENTS_H\n";
  std::string expected_src_output =
      grpc_core::GetCopyright() +
      "// Auto generated by "
      "tools/codegen/core/gen_experiments_grpc_oss.cc\n#include "
      "<grpc/support/port_platform.h>\n\n#include "
      "\"/tmp/experiments.h\"\n#ifdef GRPC_EXPERIMENTS_ARE_FINAL\n#if "
      "defined(GRPC_CFSTREAM)\nnamespace {\nconst char* const "
      "description_test_experiment = test experiment;\nconst char* const "
      "additional_constraints_test_experiment = ;\n}\n\nnamespace grpc_core "
      "{\n\nconst ExperimentMetadata g_experiment_metadata[] = {\n  "
      "{test_experiment, description_test_experiment, "
      "additional_constraints_test_experiment, required_experiments_nullptr, "
      "0, true, true},};\n\n}  // namespace grpc_core\nelif "
      "defined(GPR_WINDOWS)\nnamespace {\nconst char* const "
      "description_test_experiment = test experiment;\nconst char* const "
      "additional_constraints_test_experiment = ;\n}\n\nnamespace grpc_core "
      "{\n\nconst ExperimentMetadata g_experiment_metadata[] = {\n  "
      "{test_experiment, description_test_experiment, "
      "additional_constraints_test_experiment, required_experiments_nullptr, "
      "0, true, true},};\n\n}  // namespace grpc_core\n\n#else\nnamespace "
      "{\nconst char* const description_test_experiment = test "
      "experiment;\nconst char* const additional_constraints_test_experiment = "
      ";\n}\n\nnamespace grpc_core {\n\nconst ExperimentMetadata "
      "g_experiment_metadata[] = {\n  {test_experiment, "
      "description_test_experiment, additional_constraints_test_experiment, "
      "required_experiments_nullptr, 0, true, true},};\n\n}  // namespace "
      "grpc_core\n#endif\n\n#endif\n";
  EXPECT_EQ(expected_hdr_output, hdr_output);
  EXPECT_EQ(expected_src_output, src_output);
  LOG(INFO) << "hdr_output: " << hdr_output;
  LOG(INFO) << "src_output: " << src_output;
}

TEST_F(ExperimentsCompilerTest, GenerateGrpcOssTestExperimentsOutput) {
  EXPECT_OK(AddExperimentDefinition(
      "name: test_experiment\ndescription: test experiment\nowner: "
      "ladynana\nexpiry: 2025-01-01\nuses_polling: true\nallow_in_fuzzing_"
      "config: true\ntest_tags: [\"test_tag_1\", \"test_tag_2\"]\n"));
  EXPECT_OK(
      AddRolloutSpecification("name: test_experiment\ndefault_value: True\n"));
  // Check the experiment definitions and rollout specifications are added
  // correctly.
  std::string hdr_filename = "/tmp/experiments.github.h";
  std::string src_filename = "/tmp/experiments.github.cc";
  EXPECT_OK(GenerateExperimentsHdr(hdr_filename, "grpc_oss_test"));
  EXPECT_OK(
      GenerateExperimentsSrc(src_filename, hdr_filename, "grpc_oss_test"));
  std::string hdr_output;
  std::string src_output;
  EXPECT_OK(ReadFile(hdr_filename, hdr_output));
  EXPECT_OK(ReadFile(src_filename, src_output));
  // Check output file is generated correctly.
  std::string expected_hdr_output =
      grpc_core::GetCopyright() +
      "// Auto generated by "
      "tools/codegen/core/gen_experiments_grpc_oss.cc\n" +
      "//" + grpc_core::GetGrpcCodegenPlaceholderText() +
      "\n#ifndef GRPC_SRC_CORE_LIB_EXPERIMENTS_EXPERIMENTS_H\n#define "
      "GRPC_SRC_CORE_LIB_EXPERIMENTS_EXPERIMENTS_H\n#include "
      "<grpc/support/port_platform.h>\n#include "
      "\"src/core/lib/experiments/config.h\"\nnamespace grpc_core {\n#ifdef "
      "GRPC_EXPERIMENTS_ARE_FINAL\n#if defined(GRPC_CFSTREAM)\n#define "
      "%sGRPC_EXPERIMENT_IS_INCLUDED_TEST_EXPERIMENT\ninline bool "
      "IsTestExperimentEnabled() { return return true;; }\nelif "
      "defined(GPR_WINDOWS)\n#define "
      "%sGRPC_EXPERIMENT_IS_INCLUDED_TEST_EXPERIMENT\ninline bool "
      "IsTestExperimentEnabled() { return return true;; }\n\n#else\n#define "
      "%sGRPC_EXPERIMENT_IS_INCLUDED_TEST_EXPERIMENT\ninline bool "
      "IsTestExperimentEnabled() { return return true;; }\n#endif\n\n#else\n "
      "enum ExperimentIds {\n  kExperimentId{TestExperiment,\n  "
      "{kNumExperiments}\n};\n#define "
      "GRPC_EXPERIMENT_IS_INCLUDED_TEST_EXPERIMENT\ninline bool "
      "IsTestExperimentEnabled() { return "
      "IsExperimentEnabled<kExperimentIdTestExperiment>(); }\nextern const "
      "ExperimentMetadatag_experiment_metadata[kNumExperiments];\n#endif\n}  "
      "// namespace grpc_core\n#endif  // "
      "GRPC_SRC_CORE_LIB_EXPERIMENTS_EXPERIMENTS_H\n";
  std::string expected_src_output =
      grpc_core::GetCopyright() +
      "// Auto generated by "
      "tools/codegen/core/gen_experiments_grpc_oss.cc\n#include "
      "<grpc/support/port_platform.h>\n\n#include "
      "\"/tmp/experiments.h\"\n#ifdef GRPC_EXPERIMENTS_ARE_FINAL\n#if "
      "defined(GRPC_CFSTREAM)\nnamespace {\nconst char* const "
      "description_test_experiment = test experiment;\nconst char* const "
      "additional_constraints_test_experiment = ;\n}\n\nnamespace grpc_core "
      "{\n\nconst ExperimentMetadata g_test_experiment_metadata[] = {\n  "
      "{test_experiment, description_test_experiment, "
      "additional_constraints_test_experiment, required_experiments_nullptr, "
      "0, true, true},};\n\n}  // namespace grpc_core\nelif "
      "defined(GPR_WINDOWS)\nnamespace {\nconst char* const "
      "description_test_experiment = test experiment;\nconst char* const "
      "additional_constraints_test_experiment = ;\n}\n\nnamespace grpc_core "
      "{\n\nconst ExperimentMetadata g_test_experiment_metadata[] = {\n  "
      "{test_experiment, description_test_experiment, "
      "additional_constraints_test_experiment, required_experiments_nullptr, "
      "0, true, true},};\n\n}  // namespace grpc_core\n\n#else\nnamespace "
      "{\nconst char* const description_test_experiment = test "
      "experiment;\nconst char* const additional_constraints_test_experiment = "
      ";\n}\n\nnamespace grpc_core {\n\nconst ExperimentMetadata "
      "g_test_experiment_metadata[] = {\n  {test_experiment, "
      "description_test_experiment, additional_constraints_test_experiment, "
      "required_experiments_nullptr, 0, true, true},};\n\n}  // namespace "
      "grpc_core\n#endif\n\n#endif\n";
  EXPECT_EQ(expected_hdr_output, hdr_output);
  EXPECT_EQ(expected_src_output, src_output);
  LOG(INFO) << "hdr_output: " << hdr_output;
  LOG(INFO) << "src_output: " << src_output;
}
}  // namespace testing
}  // namespace grpc

int main(int argc, char** argv) {
  grpc::testing::TestEnvironment env(&argc, argv);
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
